# to support for commending in Chinese
# -*- coding: gbk -*-
import os
import platform
import sys
import unittest
import logging
import shutil
import subprocess
import filecmp
logging.basicConfig(level=logging.DEBUG,
            format='%(asctime)s line:%(lineno)d %(funcName)s: %(levelname)s:%(message)s',
            datefmt='%H:%M:%S',
            )

def getstatusoutput(cmd):
    cmd_process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    cmd_echo = cmd_process.stdout.read()
    cmd_process.stdout.close()
    sts = cmd_process.wait()
    try:
        cmd_echo = cmd_echo.decode('UTF-8')
    except UnicodeDecodeError:
        cmd_echo = cmd_echo.decode('gbk', errors='ignore')
    if int(platform.python_version().split('.')[0]) < 3:
        if platform.system() == 'Windows':
            cmd_echo = cmd_echo.encode('gbk', errors='ignore')
        else:
            cmd_echo = cmd_echo.encode('UTF-8', errors='ignore')
    if cmd_echo[-1:] == '\n': cmd_echo = cmd_echo[:-1]
    return sts, cmd_echo

def mysyscall(cmd):
    logging.info(cmd)
    sts, text = getstatusoutput(cmd)
    logging.info(text)
    return sts

class RepoInitTest(unittest.TestCase):
    """针对init功能进行基本功能测试
        # 观察点：
        1、钩子文件是否挂载
        2、目标库是否拉下来
        3、基础目录是否正确
    """
    def setUp(self):
        """init操作的测试前处理任务
        """
        self.workspace = r"D:\repo_test1"
        self.repo_list = None
        self.repobranch_script_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "repobranch.py")
        if os.path.isdir(self.workspace):
            getstatusoutput("rmdir /s /q %s" % self.workspace)
        self.assertEqual(os.path.isdir(self.workspace), False)
        os.makedirs(self.workspace)

    def checkhook(self, repolist):
        for des_path in repolist:
            for filename in ["post-commit", "pre-push"]:
                src = os.path.join(self.workspace, "hert/uci_script/git_hooks/hooks", filename)
                des = os.path.join(self.workspace, des_path, ".git/hooks", filename)
                if False == filecmp.cmp(src, des):
                    logging.error("%s is unequal"%filename)
                    return False
        logging.info("%s check hook success" %str(repolist))
        return True

    def checkrepolist(self, repolist):
        if not os.path.isdir(os.path.join(self.workspace, ".repo")):
            logging.error("%s is not exist" % os.path.join(self.workspace, ".repo"))
            return False

        self.assertEqual(os.path.isdir(os.path.join(self.workspace, ".repo")), True)
        for single_repo in repolist:
            if not os.path.isdir(os.path.join(self.workspace, single_repo)):
                logging.error("check %s fail"% single_repo)
                return False
            logging.info("checkout %s success" % single_repo)
        return True

    def testcase_InitAllRepo(self):
        """无子库场景下，下载SMS全量配置库
            1、执行init命令,指定某个固定路径，默认全量库下载
            2、断言判断清单库目录是否存在，返回值是否正确
        """
        ret = mysyscall("%s init -m SMS.xml -l %s" %(self.repobranch_script_path, self.workspace))
        self.assertEqual(ret, 0)

        # 对以上命令中的库 + uci_script库做检查，同时检查下.repo目录。检查钩子
        repolist = [r"hert/uci_script", r"hert/build", r"hert/project", r"hert/rbtest/mbts_temp"]
        self.assertEqual(self.checkrepolist(repolist), True)
        self.assertEqual(self.checkhook(repolist), True)
        return True

    def testcase_InitPartRepo(self):
        """测试目标
            1、在无库的情况下，下载2个库
            2、在已经有子库的情况下，下载2个库
        """
        repolist = ["hert/project", "hert/build"]
        ret = mysyscall("%s init -m RB.xml -l %s -w %s" %(self.repobranch_script_path, self.workspace, ",".join(repolist)))
        self.assertEqual(ret, 0)

        # 对以上命令中的库 + uci_script库做检查，同时检查下.repo目录。检查钩子
        repolist.append("hert/uci_script")
        self.assertEqual(self.checkrepolist(repolist), True)
        self.assertEqual(self.checkhook(repolist), True)

        # 继续进行测试下载3个库
        repolist = ["hert/makebin", "hert/build", "hert/makepkg"]
        ret = mysyscall("%s init -m RB.xml -l %s -w %s" %(self.repobranch_script_path, self.workspace, ",".join(repolist)))
        self.assertEqual(ret, 0)

        repolist.append("hert/uci_script")
        self.assertEqual(self.checkrepolist(repolist), True)
        self.assertEqual(self.checkhook(repolist), True)
        return True

    def testcase_InitAllRepoWithRepo(self):
        """有子库情况下，下载BSP全量配置库
        """
        return True

    def tearDown(self):
        """后处理动作"""
        if os.path.isdir(self.workspace):
            getstatusoutput("rmdir /s /q %s" % self.workspace)
        self.assertEqual(os.path.isdir(self.workspace), False)

class RepoBranchTest(unittest.TestCase):
    def setUp(self):
        pass

    def tearDown(self):
        pass

    @unittest.skip("还没搞定不跑测试1")
    def test_case1(self):
        logging.info("1111111")

    @unittest.skip("还没搞定不跑测试2")
    def test_case2(self):
        logging.info("00000000")

if __name__ == "__main__":
    unittest.main()
